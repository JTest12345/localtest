@model IEnumerable<KodaWeb.Models.PFforOldSystem>

@{
    ViewBag.Title = "旧システム機種用_未完了帳票一覧";
}

<div class="div_container">
    <p class="qr_icon inputboxTitle">社員コード</p>
    <input id="empcd" class="use_keyboard" value="" />
    <span id="clear_empcd" class="clear_btn"></span>
</div>

<p class="margin0"><span class="msg">@ViewBag.Msg</span></p>
<p class="margin0"><span class="errmsg">@ViewBag.ErrMsg</span></p>

<button class="reset-filter-button">Reset Filter</button>

<div class="table_div">
    <table class="tablesorter">
        <thead>
            <tr>
                <th>作業</th>
                <th>@Html.DisplayNameFor(model => model.Typecd)</th>
                <th>10桁ロット番号</th>
                <th>@Html.DisplayNameFor(model => model.Plantcd)</th>
                <th>@Html.DisplayNameFor(model => model.FormName)</th>
                <th>@Html.DisplayNameFor(model => model.FormNo)</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model) {
                <tr>
                    <td>
                        <a href="@item.LinkUrl" class="pfInput">入力</a>|
                        @Html.ActionLink("削除", "OldSystemDeletePF", "Form", new { typecd = item.Typecd, lotno = item.LotNo18, procno = item.ProcNo }, new {@class="pfDelete", target = "_self", rel = "noopener noreferrer" })
                    </td>
                    <td>@Html.DisplayFor(modelItem => item.Typecd)</td>
                    <td>@Html.DisplayFor(modelItem => item.LotNo18)</td>
                    <td>@Html.DisplayFor(modelItem => item.Plantcd)</td>
                    <td>@Html.DisplayFor(modelItem => item.FormName)</td>
                    <td>@Html.DisplayFor(modelItem => item.FormNo)</td>
                </tr>
            }
        </tbody>
    </table>
</div>

@section scripts {

    <script language="javascript" type="text/javascript">

        $(function () {

            //テーブルの書式設定とフィルタリセットボタンの設定
            $("table").tablesorter({
                theme: 'blue',
                widthFixed: true,
                widgets: ['zebra', 'columns', 'filter', 'pager', 'resizable', 'stickyHeaders'],
                //フィルタのリセットボタンを追加する場合に設定する。
                widgetOptions: {
                    filter_reset: 'button.reset-filter-button',
                    resizable: true,
                }
            });
            //$("table").tablesorterPager({
            //    container: $(".pager"),
            //});


            //[入力]がクリックされた時の処理
            $(".pfInput").on("click", function (e) {
                let empcd = $("#empcd").val();

                if (empcd === "") {
                    alert("社員コードを入力して下さい。")
                } else {
                    empcd = empcd.replace("01 ", "");

                    let url = $(this).attr('href');
                    url = url.replace("login_user", empcd);

                    //window.open(url);//新規タブで開く
                    window.location.href = url;//同一タブで開く
                }
                return false;//これで元々のhrefが実行されなくなる
            });

            //[削除]がクリックされた時の処理
            $(".pfDelete").on("click", function (e) {
                let empcd = $("#empcd").val();

                if (empcd === "") {
                    alert("社員コードを入力して下さい。")
                } else {
                    let url = $(this).attr('href');
                    url += `&empcd=${empcd}`;
                    //window.open(url);//新規タブで開く
                    window.location.href = url;//同一タブで開く
                }
                return false;//これで元々のhrefが実行されなくなる
            });

            //社員コード初期化イベント
            onClick_clearInput("#clear_empcd", "#empcd");

        });

    </script>
}